&НаКлиенте
Функция ОбновитьЗаголовок()
	ЭтаФорма.Заголовок = "Вход в " + Элементы.Сервер.СписокВыбора.НайтиПоЗначению(api_url);
КонецФункции

//События формы и элементов формы
&НаСервере
Процедура ПрочитатьНастройки()
	context_param = Saby_Core.НастройкиПодключенияПрочитать();
	
	Если context_param <> Неопределено Тогда
		//Заполним элементы формы данными из настроек
		context_param.Свойство("password", password);
		context_param.Свойство("login", login);
		context_param.Свойство("api_url", api_url);
		context_param.Свойство("ConnectionId", ConnectionId);
		proxy			= Неопределено;
		Если context_param.Свойство("Proxy", proxy) Тогда
			Если proxy.Свойство("Protocol") Тогда
				ProxyProtocol	= proxy.Protocol;
			КонецЕсли;
			Если proxy.Свойство("Server") Тогда
				ProxyServer	= proxy.Server;
			КонецЕсли;
			Если proxy.Свойство("Port") Тогда
				ProxyPort	= proxy.Port;
			КонецЕсли;
			Если proxy.Свойство("User") Тогда
				ProxyLogin	= proxy.User;
			КонецЕсли;
			Если proxy.Свойство("Password") Тогда
				ProxyPassword	= proxy.Password;
			КонецЕсли;
		КонецЕсли;
	Иначе
		context_param = Новый Структура();
	КонецЕсли;
	
	Если ПустаяСтрока(api_url)Тогда
		api_url = Элементы.Сервер.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПрочитатьНастройки();
	ОбновитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Элементы.Ошибка.Видимость = Ложь;
	Элементы.ГруппаНастройкиПодключения.Скрыть();
КонецПроцедуры

&НаСервере
Процедура ОтправитьКодАвторизации(ДополнительныеПараметры)
	Модуль = ПолучитьМодульОбъекта();
	//Первая стадия двухфакторной авторизации
	ПараметрыМетода	= Новый Структура("Идентификатор", ДополнительныеПараметры.Идентификатор);
	res = Модуль.local_helper_exec_method(
		context_param,
		Новый Структура("url, method, params, auto_auth",
			context_param.api_url+"/auth/service/",
			ДополнительныеПараметры.МетодОтправкиКодаПодтверждения,
			ПараметрыМетода,
			Ложь,
		)
	);
КонецПроцедуры

&НаСервере
Процедура ВходПроверкаКодаСМС(ДополнительныеПараметры, Код)
	Модуль = ПолучитьМодульОбъекта();
	//Вторая стадия двухфакторной авторизации
	ПараметрыМетода	= Новый Структура("Идентификатор, Код", ДополнительныеПараметры.Идентификатор, Код);
	res = Модуль.local_helper_exec_method(
		context_param,
		Новый Структура("url, method, params, auto_auth",
			context_param.api_url+"/auth/service/",
			ДополнительныеПараметры.МетодПроверкиКодаИсключения,
			ПараметрыМетода,
			Ложь,
		)
	);
	context_param.Вставить("session", res["result"]);
	
	Попытка
		connection_info = Модуль.ПолучитьПодключение(context_param);
		context_param.Вставить("ConnectionId", connection_info["ConnectionId"]);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		context_param.Вставить("ConnectionId",	Неопределено);
		context_param.Вставить("session",	Неопределено);
		context_param.Вставить("password",	Неопределено);
		Модуль.НастройкиПодключенияЗаписать(context_param);
		ВызватьИсключение(NewExtExceptionСтрока(ИнфОбОшибке));
	КонецПопытки;
	Модуль.НастройкиПодключенияЗаписать(context_param);
	Модуль.ПолучитьСтатусВерсии(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Войти(Команда)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	Если НЕ ЗначениеЗаполнено(login) ИЛИ НЕ ЗначениеЗаполнено(password) Тогда
		ЭлементыФормочки.Ошибка.Видимость = Истина;
		ЭлементыФормочки.Ошибка.Заголовок = "Не указан логин или пароль";
		Возврат;
	КонецЕсли;
	context_param.Вставить("login", login);
	context_param.Вставить("password", password);
	context_param.Вставить("api_url", api_url);
	context_param.Вставить("ConnectionId", ConnectionId);
	context_param.Удалить("Proxy");
	Если Не ПустаяСтрока(ProxyProtocol) И  Не ПустаяСтрока(ProxyServer) И (ProxyPort > 0 И ProxyPort <= 65535) Тогда
		Proxy	= Новый Структура("Protocol, Server, Port, User, Password",
			ProxyProtocol, ProxyServer, ProxyPort, ProxyLogin, ProxyPassword);
		context_param.Вставить("Proxy", Proxy);
	КонецЕсли;
	Попытка
		ВойтиНаСервере(context_param);
		ЭтаФорма.Закрыть(context_param);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОшибкаСтруктура = ExtExceptionAnalyse(ИнфОбОшибке);
		ExtExceptionToJournal(ОшибкаСтруктура);

		Если ТипЗнч(get_prop(ОшибкаСтруктура, "detail")) = Тип("Соответствие") и ТипЗнч(ОшибкаСтруктура.detail["error"]) = Тип("Соответствие") Тогда
			ДанныеОшибки = ОшибкаСтруктура.detail["error"]["data"];
			Если	ТипЗнч(ДанныеОшибки) = Тип("Соответствие")
					И (Врег(ДанныеОшибки["classid"]) = "{00000000-0000-0000-0000-1FA000001002}")
					И ТипЗнч(ДанныеОшибки["addinfo"]) <> Неопределено Тогда
				ПарметрыФормыВводаСМС	= Новый Структура;
				Для Каждого КлЗнч Из ДанныеОшибки["addinfo"] Цикл
					ПарметрыФормыВводаСМС.Вставить(КлЗнч.Ключ, КлЗнч.Значение);
				КонецЦикла;
				ОшибкаСтруктура.Вставить("detail", "");
				ОшибкаСтруктура.Вставить("message", "");
				Попытка
					context_param.Вставить("session", ПарметрыФормыВводаСМС.ИдентификаторСессии);
					ОтправитьКодАвторизации(ПарметрыФормыВводаСМС);
					
					ПодсказкаЧ1 = "";
					ПарметрыФормыВводаСМС.Свойство("Сообщение", ПодсказкаЧ1);
					ПодсказкаЧ2 = "";
					ПарметрыФормыВводаСМС.Свойство("Телефон", ПодсказкаЧ2);
					ЭлементыФормочки.ИнформацияПользователю.Заголовок = ПодсказкаЧ1 + " " + ПодсказкаЧ2;
					
					ЭлементыФормочки.ГруппаВводаЛогинаИПароля.Видимость		= Ложь;
					ЭлементыФормочки.ПодтверждениеКода.Видимость				= Истина;
					ЭлементыФормочки.ОтменитьПодтверждение.КнопкаПоУмолчанию	= Истина;
				Исключение
					context_param.Вставить("session", "");
					ИнфОбОшибке = ИнформацияОбОшибке();
					ОшибкаСтруктура = ExtExceptionAnalyse(ИнфОбОшибке);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		ЭлементыФормочки.Ошибка.Видимость = Истина;
		ЭлементыФормочки.Ошибка.Заголовок = ExtExceptionToMessage(ОшибкаСтруктура);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ВойтиНаСервере(context_param)
	Модуль = ПолучитьМодульОбъекта();
	Модуль.ВойтиНаСервере(context_param);
КонецФункции

&НаКлиенте
Процедура ПодтвердитьКод(Команда)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	Попытка
		ВходПроверкаКодаСМС(ПарметрыФормыВводаСМС, code_sms);
		Закрыть(context_param);
		ЭлементыФормочки.ГруппаВводаЛогинаИПароля.Видимость	= Истина;
		ЭлементыФормочки.ПодтверждениеКода.Видимость		= Ложь;
		ЭлементыФормочки.Войти.КнопкаПоУмолчанию			= Истина;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОшибкаСтруктура = ExtExceptionAnalyse(ИнфОбОшибке);
		ЭлементыФормочки.Ошибка.Видимость = Истина;
		ЭлементыФормочки.Ошибка.Заголовок = ExtExceptionToMessage(ОшибкаСтруктура);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПодтверждение(Команда)
	ПарметрыФормыВводаСМС = Неопределено;
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ЭлементыФормочки.ГруппаВводаЛогинаИПароля.Видимость	= Истина;
	ЭлементыФормочки.ПодтверждениеКода.Видимость			= Ложь;
	ЭлементыФормочки.Войти.КнопкаПоУмолчанию				= Истина;
КонецПроцедуры

&НаКлиенте
Процедура СерверПриИзменении(Элемент)
	ОбновитьЗаголовок();
КонецПроцедуры


#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_ExtException
#КонецОбласти

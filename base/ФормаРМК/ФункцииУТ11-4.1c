
&НаКлиенте
Процедура _Saby_ПриОткрытииПосле()
КонецПроцедуры

&НаКлиенте
Процедура _Saby_ПослеЗакрытияФормыВыборкаКартыСкидки(РезультатОбработки, ДополнительныеПараметры)
	Saby_Карта	= РезультатОбработки;
	Saby_ДанныеВрем	= Saby_Core.get_prop(РезультатОбработки, "Saby_Данные");
	Если Saby_ДанныеВрем	= Неопределено Тогда
		//Окно поиска закрыли крестиком, действий ни каких не требуется
		//Т.к. на форме могли использовать карту. и она почему то запоминается навсегда
		// поэтому сбросим идентификатор временного документа
		Saby_Данные.Вставить("ЧекИд", СокрЛП(Новый УникальныйИдентификатор()) );
	Иначе
		Saby_Данные = Saby_ДанныеВрем;
	КонецЕсли;
	
	Saby_ВыполняемаяКоманда = Неопределено;
	
	Saby_ОбновитьПредставлениеКарты();
	Saby_НазначитьАвтоматическиеСкидкиКлиент(Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Saby_ПоискКартыЛояльностиНажатие_Комманда(Элемент) Экспорт
	СтандартнаяОбработка	= Ложь;
	Saby_ОткрытьФормуПоискКартыЛояльности(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура Saby_СоздатьРеквизитыИЭлементыФормыНазначитьДействия()
	Saby_ФормаСервер.Saby_СоздатьРеквизитыИЭлементыФормыНазначитьДействия(ЭтаФорма, "ГруппаИтоги", "СтраницыСуммаСкидки");
КонецПроцедуры

&НаСервере
Функция Saby_ПолучитьОрганизацию() Экспорт
	Возврат Saby_Сервисы_Сервер.ПолучитьОрганизацию(ЭтаФорма);
КонецФункции

&НаСервере
Функция Saby_ПолучитьМагазин() Экспорт
	Возврат "";
КонецФункции

&НаСервере
Функция Saby_ПолучитьСклад() Экспорт
	Возврат Объект.Склад;
КонецФункции

&НаКлиенте
Функция Saby_ЭтоВозврат_Клиент() Экспорт
	Возврат Saby_ЭтоВозврат();
КонецФункции
&НаСервере
Функция Saby_ЭтоВозврат() Экспорт
	Возврат Saby_ЭтоВозврат_Сервер(Объект);
КонецФункции
&НаСервере
Функция Saby_ЭтоВозврат_Сервер(Объект) Экспорт
	Возврат Saby_Сервисы_СерверПодКонфигурацию.ЭтоВозврат(Объект);
КонецФункции

&НаКлиенте
Процедура Saby_ОбновитьФорму_()
КонецПроцедуры

&НаСервере
Процедура Saby_ОтменитьРучныеСкидки()
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Ложь );
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьАвтоматическиеСкидкиЗавершение")
Процедура Saby_НазначитьАвтоматическиеСкидкиКлиент(ВозвращенноеЗначение, ДополнительныеПараметры)
	context_param = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если context_param = Неопределено Тогда
		ДопПараметры = Новый Структура("Метод", "РассчётСкидок");
		Оповещение = Новый ОписаниеОповещения("ЗапуститьОповещениеПриНаличииСессии_ПослеАутентификации", ЭтаФорма, ДопПараметры);
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, Оповещение);
		Возврат;
	КонецЕсли;
	
	Saby_НазначитьАвтоматическиеСкидкиОбщая();
	ИнформацияОбОплате(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура Saby_ТоварыНоменклатураПриИзмененииСервер(ИдентификаторТекущейСтроки)
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки",);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтотОбъект.ИмяФормы, "Товары"));
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтруктураДействий);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	ТекущаяСтрока.Сумма	= ТекущаяСтрока.Сумма	- ТекущаяСтрока.СуммаРучнойСкидки;
КонецПроцедуры

&НаКлиенте
Процедура Saby_ЗаполнитьСкидки_Сервер( МассивСкидок )

	Saby_ОтменитьРучныеСкидки();
	
	Если ТипЗнч(МассивСкидок) = Тип("Массив") Тогда
		ТоварыСчёт = 0;
		Для Каждого СтрокаТовСкидки Из МассивСкидок Цикл
			//Мы же верим, что количество строк таблицы товаров соответствует количеству строк в массиве скидо
			//и они соответсвуют друг другу

			//Аварийный выход! - Вырви шнур, выдави стекло
			Если ТоварыСчёт +1 > Объект.Товары.Количество() Тогда Прервать; КонецЕсли;
			СтрокаРасчётаТовар = Объект.Товары[ТоварыСчёт];
			ТоварыСчёт = ТоварыСчёт + 1;
			
			//Обалдеем от случившегося, попробуем угадать следующую строку
			Если СтрокаТовСкидки.Номенклатура <> СтрокаРасчётаТовар.Номенклатура Тогда Продолжить; КонецЕсли;
			
			СтрокаРасчётаТовар.СуммаРучнойСкидки =  СтрокаТовСкидки.СуммаСкидки;
			Saby_ТоварыНоменклатураПриИзмененииСервер( СтрокаРасчётаТовар.ПолучитьИдентификатор() );
		КонецЦикла;
	КонецЕсли;
	
	Объект.СуммаДокумента	= ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект["Товары"], Объект.ЦенаВключаетНДС);
	//ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице( Объект.Товары, Объект.ЦенаВключаетНДС );
	Saby_ИзменилсяСостав	= Ложь;
	Объект.СкидкиРассчитаны	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЧекВозврата(Источник, Параметры)
	Saby_Данные = Параметры.Saby_Данные;
	Saby_Данные.Вставить("ДокументЭтоВозврат",	Истина);
	Saby_Данные.Вставить("ЦенаВключаетНДС",		Объект.ЦенаВключаетНДС);
	Saby_Данные.Вставить("Организация",			Saby_ПолучитьОрганизацию());
	Saby_Данные.Вставить("Магазин",				Saby_ПолучитьМагазин());
	Saby_Данные.Вставить("Склад",				Saby_ПолучитьСклад());
	
	//Отдав на обсчёт данные, мы создаём на БЛ документ реализации. И иначе ну ни как.
	Saby_Сервисы_Клиент.ПодготовитьДанныеИПересчитатьСкидки(ЭтаФорма, Параметры.ТоварыЧека, Saby_Данные);
	Saby_ПараметрыЗакрытияЧекаККМнаБЛ = Новый Структура("ЧекККМСсылка", );
	Saby_ЗакрытиеЧекаККМнаБЛ(Источник);
	
	//Сброс всех переменных
	Saby_ИнициализацияПеременных();
	Saby_ОбновитьПредставлениеКарты();
КонецПроцедуры

&НаКлиенте
&После("ОбработкаОповещения")
Процедура Saby_ОбработкаОповещения(ИмяСобытия, Параметры, Источник)
	Если ИмяСобытия = "Запись_ЧекККМВозврат_ЧекПробит" Тогда
		ПередатьЧекВозврата(Источник, Параметры);
	КонецЕсли;
КонецПроцедуры


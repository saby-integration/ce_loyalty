
&НаКлиенте
Процедура _Saby_ПриОткрытииПосле()
КонецПроцедуры

&НаКлиенте
Процедура _Saby_ПослеЗакрытияФормыВыборкаКартыСкидки(РезультатОбработки, ДополнительныеПараметры)
	Saby_Карта	= РезультатОбработки;
	Saby_ДанныеВрем	= Saby_Core.get_prop(РезультатОбработки, "Saby_Данные");
	Если Saby_ДанныеВрем	= Неопределено Тогда
		//Окно поиска закрыли крестиком, действий ни каких не требуется
		//Т.к. на форме могли использовать карту. и она почему то запоминается навсегда
		// поэтому сбросим идентификатор временного документа
		Saby_Данные.Вставить("ЧекИд", СокрЛП(Новый УникальныйИдентификатор()) );
	Иначе
		Saby_Данные = Saby_ДанныеВрем;
	КонецЕсли;

	
	Если Saby_Данные.ДокументЭтоВозврат = Истина Тогда
		//Очистим данные, они в возврате не нужны
		Saby_Данные.Вставить("КЛБалловВсего",			0);
		Saby_Данные.Вставить("ДокументСумма",			0);
		Saby_Данные.Вставить("ДокументСуммаСоСкидкой",	0);
		Saby_Данные.Вставить("ДокументСкидка",			0);
		Saby_Данные.Вставить("ДокументВтчБаллами",		0);
		Saby_Данные.Вставить("ДокументБалловСписать",	0);
		Saby_Данные.Вставить("ДокументБалловДоступно",	0);
		
	КонецЕсли;
	
	Saby_Карта	= Saby_Core.get_prop(Saby_Данные, "КЛНомер", "КартаОтсутствует");
	Если Saby_Карта	= "" Тогда
		Saby_Карта	= "КартаОтсутствует";
	КонецЕсли;
	
	Saby_ОбновитьПредставлениеКарты();
	Saby_НазначитьАвтоматическиеСкидкиКлиент(Неопределено, Неопределено);
КонецПроцедуры

&НаСервере
Процедура Saby_СоздатьРеквизитыИЭлементыФормыНазначитьДействия()
	Saby_ФормаСервер.Saby_СоздатьРеквизитыИЭлементыФормыНазначитьДействия(ЭтаФорма, "ГруппаСумм", "СуммаСкидки");
КонецПроцедуры

&НаСервере
Функция Saby_ПолучитьОрганизацию() Экспорт
	Возврат Saby_Сервисы_Сервер.ПолучитьОрганизацию(ЭтаФорма)
КонецФункции

Функция Saby_ПолучитьМагазин() Экспорт
	Возврат Объект.Магазин;
КонецФункции

Функция Saby_ПолучитьСклад() Экспорт
	Возврат СкладПродажиПоУмолчанию;
КонецФункции

&НаКлиенте
Функция Saby_ЭтоВозврат_Клиент() Экспорт
	Возврат Saby_ЭтоВозврат();
КонецФункции
&НаСервере
Функция Saby_ЭтоВозврат() Экспорт
	Возврат Saby_ЭтоВозврат_Сервер(Объект);
КонецФункции
&НаСервере
Функция Saby_ЭтоВозврат_Сервер(Объект) Экспорт
	Возврат Saby_Сервисы_СерверПодКонфигурацию.ЭтоВозврат(Объект);
КонецФункции

&НаКлиенте
Процедура Saby_ОбновитьФорму_()
	ОбновитьФормуНаКлиенте();
КонецПроцедуры

&НаКлиенте
&После("ОбновитьФормуНаКлиенте")
Процедура Saby_ОбновитьФорму()
	////Доступность только при продаже
	//ЭФ = Элементы.Найти("Saby_ПоискКартыЛояльности");
	//Если ЭФ <> Неопределено Тогда
	//	Элементы.Saby_ПоискКартыЛояльности.Доступность = ???;	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Saby_ОтменитьРучныеСкидки_()
	ОтменитьРучныеСкидки();
КонецПроцедуры

//Автоматический расчёт скидок
&НаКлиенте
&Вместо("НазначитьАвтоматическиеСкидкиКлиент")
Процедура Saby_НазначитьАвтоматическиеСкидкиКлиент(ТолькоСообщенияПослеОформления = Ложь, НеВыводитьСообщения = Ложь, ПараметрыДляОплаты = Неопределено)
	context_param = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если context_param = Неопределено Тогда
		ДопПараметры = Новый Структура("Метод", "РассчётСкидок");
		Оповещение = Новый ОписаниеОповещения("ЗапуститьОповещениеПриНаличииСессии_ПослеАутентификации", ЭтаФорма, ДопПараметры);
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, Оповещение);
		Возврат;
	КонецЕсли;
	
	Saby_НазначитьАвтоматическиеСкидкиОбщая();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбновитьФормуНаКлиенте();
	ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
КонецПроцедуры

&НаКлиенте
Процедура Saby_ЗаполнитьСкидки_Сервер( МассивСкидок )
	Если ТипЗнч(МассивСкидок) = Тип("Массив") И МассивСкидок.Количество() > 0 Тогда
		Saby_ОтменитьРучныеСкидки_();
		ТоварыСчёт = 0;
		Для Каждого СтрокаТовСкидки Из МассивСкидок Цикл
			//Мы же верим бакенду, что количество строк таблицы товаров соответствует количеству строк в массиве скидок
			//и они соответсвуют друг другу

			//Аварийный выход! - Вырви шнур, выдави стекло
			Если ТоварыСчёт+1 > Объект.Товары.Количество() Тогда Прервать; КонецЕсли;
			СтрокаРасчёта = Объект.Товары[ТоварыСчёт];
			ТоварыСчёт = ТоварыСчёт + 1;

			//Еще раз убедимся, что всё верно
			Если СтрокаТовСкидки.Номенклатура <> СтрокаРасчёта.Номенклатура Тогда Продолжить; КонецЕсли;
			
			СтрокаРасчёта.СуммаАвтоматическойСкидки	= СтрокаТовСкидки.СуммаСкидки;
			ЦенаВручную	= get_prop(СтрокаТовСкидки, "ЦенаВручную", 0);
			Если ЦенаВручную > 0 Тогда
				//(СтрокаРасчёта.Сумма-СтрокаРасчёта.СуммаРучнойСкидки) / СтрокаРасчёта.КоличествоУпаковок
				СтрокаРасчёта.СуммаРучнойСкидки	= (СтрокаРасчёта.Цена - ЦенаВручную) * СтрокаРасчёта.КоличествоУпаковок;
				//Или ручная пользователем введёная, или автоматическая от БЛ, одновременно быть не может.
				СтрокаРасчёта.СуммаАвтоматическойСкидки			= 0;
			КонецЕсли;

			//СтрокаРасчёта.Сумма		= СтрокаРасчёта.КоличествоУпаковок * СтрокаРасчёта.Цена;
			СтруктураДействий	= Новый Структура(
				"ПересчитатьСумму, ПересчитатьСуммуНДС, ПересчитатьСуммуСУчетомРучнойСкидки, ПересчитатьСуммуСУчетомАвтоматическойСкидки, ПересчитатьПроцентРучнойСкидки",
				Новый Структура(),
				Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС),
				Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь),
				Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь),
				Новый Структура(),
			);
			ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаРасчёта, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;
		
		Объект.СуммаДокумента	= ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект.Товары, Объект.ЦенаВключаетНДС);
	КонецЕсли;
	Объект.СкидкиРассчитаны	= Истина;
КонецПроцедуры

&НаКлиенте
&Вместо("ОплатитьТовары")
Процедура Saby_ОплатитьТовары(ИмяФормыОплаты, ОплатаПлатежнойКартой = Ложь, ОплатаПлатежнойСистемой = Ложь, Печать = Ложь)
	Saby_Данные.Вставить("ДокументЭтоВозврат", Saby_ЭтоВозврат_Клиент() );
	ТоварыДокумента	= Saby_ПолучитьМассивТоваровЧека(Saby_Данные.ДокументЭтоВозврат);
	ЧекВозврата = ?(ЗначениеЗаполнено(Объект.ЧекККМПродажа), Объект.ЧекККМПродажа, Неопределено );
	Saby_Данные.Вставить("ДокументОснованиеСсылка", ЧекВозврата);
	Saby_Сервисы_Клиент.ПодготовитьДанныеИПересчитатьСкидки(ЭтаФорма, ТоварыДокумента, ,Saby_Данные);

	ПродолжитьВызов(ИмяФормыОплаты, ОплатаПлатежнойКартой, Печать);
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО08ОплатаБонусами")
Процедура Saby_ВыполнитьЧО08ОплатаБонусами()
	//Бонусные баллы вводятся на форме поиска карты лояльности
КонецПроцедуры

&НаКлиенте
&Вместо("ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВСтроке")
Процедура Saby_ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВСтроке(РезультатОткрытияФормы, ДополнительныеПараметры)
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЧислоВвода = ?(РезультатОткрытияФормы.ВведенноеЧисло = Неопределено, 0, РезультатОткрытияФормы.ВведенноеЧисло);
		
		СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ПроцентРучнойСкидки = ДополнительныеПараметры.Знак * ЧислоВвода;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		//Изменено ++
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		//Изменено --
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
			Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(
				ДополнительныеПараметры.ЗаголовокФормы,
				СтрокаТабличнойЧасти.ПроцентРучнойСкидки,
				УменьшениеСуммыЧекаККМ);
		КонецЕсли;
		
		Если АвтоматическийРасчетСкидок И Объект.Товары.Количество() > 0 Тогда
			НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
&Вместо("ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке")
Процедура Saby_ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке(РезультатОткрытияФормы, ДополнительныеПараметры)
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЧислоВвода = ?(РезультатОткрытияФормы.ВведенноеЧисло = Неопределено, 0, РезультатОткрытияФормы.ВведенноеЧисло);
		
		СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРучнойСкидки = ДополнительныеПараметры.Знак * ЧислоВвода;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",
			Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
		//Изменения
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		//Изменения
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
			Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(
				ДополнительныеПараметры.ЗаголовокФормы,
				СтрокаТабличнойЧасти.СуммаРучнойСкидки,
				УменьшениеСуммыЧекаККМ);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Перед("ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке")
Процедура Saby_ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке(РезультатОткрытияФормы, ДополнительныеПараметры)
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.СуммаАвтоматическойСкидки = 0;
			СтрокаТовара.ПроцентАвтоматическойСкидки = 0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Перед("ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВЧеке")
Процедура Saby_ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВЧеке(РезультатОткрытияФормы, ДополнительныеПараметры)
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.СуммаАвтоматическойСкидки = 0;
			СтрокаТовара.ПроцентАвтоматическойСкидки = 0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&После("Подключаемый_КомандаСкидкиОтменаСкидокВЧеке")
Процедура Saby_Подключаемый_КомандаСкидкиОтменаСкидокВЧеке()
	НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
&После("Подключаемый_КомандаСкидкиОтменаСкидокВСтроке")
Процедура Saby_Подключаемый_КомандаСкидкиОтменаСкидокВСтроке()
	НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
КонецПроцедуры



#Область Пересчёт_ЦЕН

Функция	ПолучитьПроцентНДС(СтавкаНДС) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
КонецФункции

Функция	ПолучитьСуммуНДС(КоличествоУпаковок, Цена, ТекПроцентНДС, ЦенаВключаетНДС) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.РассчитатьСуммуНДС(КоличествоУпаковок * Цена, ТекПроцентНДС, ЦенаВключаетНДС);
КонецФункции

Функция ПолучитьСтавкуНДСИзСтрокиДокумента(СтавкаНДС) Экспорт
	Возврат СтавкаНДС;
КонецФункции	

#КонецОбласти

#Область СборДанных

Функция ПолучитьОрганизацию(ЭтаФорма) Экспорт
	Возврат ЭтаФорма.ТаблицаКассККМОрганизаций[0].КассаККМ.Владелец;
КонецФункции

Функция ЭтоВозврат(Объект) Экспорт
	Возврат Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
КонецФункции

Функция ПолучитьУчетнуюПолитикуОрганизацииИМагазинов( Организация, Магазин, Склад, ДатаСреза ) Экспорт
	СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(ДатаСреза, Организация, Магазин, Склад);
	
	УчетнаяПолитикаОрганизации	= Новый Соответствие();
	КОДНС = Saby_Сервисы_Сервер.ПолучитьКодККТПоНалоговойСистеме(СистемаНалогообложения);
	УчетнаяПолитикаОрганизации.Вставить(Магазин, Новый Соответствие());
	УчетнаяПолитикаОрганизации[Магазин].Вставить(Склад, Новый Соответствие());
	УчетнаяПолитикаОрганизации[Магазин][Склад].Вставить("СистемаНалогообложения", СистемаНалогообложения);
	УчетнаяПолитикаОрганизации[Магазин][Склад].Вставить("КодСН", КОДНС);
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	УП.Организация КАК Организация,
	//|	УП.Магазин КАК Магазин,
	//|	УП.Склад КАК Склад,
	//|	УП.СистемаНалогообложения КАК СистемаНалогообложения,
	//|	УП.ОсвобожденОтНДС КАК ОсвобожденОтНДС
	//|ИЗ
	//|	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних(&НаДату, Организация = &Организация) КАК УП
	//|ГДЕ
	//|	УП.Организация = &Организация
	//|	И УП.Магазин = &Магазин
	//|	И УП.Склад = &Склад
	//|ИТОГИ ПО
	//|	Организация,
	//|	Магазин,
	//|	Склад";
	//
	//Запрос.УстановитьПараметр("НаДату", ДатаСреза);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Магазин", Магазин);
	//Запрос.УстановитьПараметр("Склад", Склад);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//УчетнаяПолитикаОрганизации	= Новый Соответствие();
	//Пока ВыборкаОрганизация.Следующий() Цикл
	//	ВыборкаМагазин	= ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока ВыборкаМагазин.Следующий() Цикл
	//		ВыборкаСклад	= ВыборкаМагазин.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		Пока ВыборкаСклад.Следующий() Цикл
	//			ВДЗ = ВыборкаСклад.Выбрать();
	//			Пока ВДЗ.Следующий() Цикл
	//				КОДНС = Saby_Сервисы_Сервер.ПолучитьКодККТПоНалоговойСистеме(ВДЗ.СистемаНалогообложения);
	//				УчетнаяПолитикаОрганизации.Вставить(ВДЗ.Магазин, Новый Соответствие());
	//				УчетнаяПолитикаОрганизации[ВДЗ.Магазин].Вставить(ВДЗ.Склад, Новый Соответствие());
	//				УчетнаяПолитикаОрганизации[ВДЗ.Магазин][ВДЗ.Склад].Вставить("СистемаНалогообложения", ВДЗ.СистемаНалогообложения);
	//				УчетнаяПолитикаОрганизации[ВДЗ.Магазин][ВДЗ.Склад].Вставить("КодСН", КОДНС);
	//			КонецЦикла;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;
	
	Возврат УчетнаяПолитикаОрганизации;
КонецФункции

Функция ПолучитьОткрытуюКассовуюСмену ( КассаККМ, ДатаСмены = Неопределено ) Экспорт
	
	Если ДатаСмены = Неопределено Тогда
		ДатаСмены = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументКассоваяСмена.Ссылка КАК Ссылка,
	|	ДокументКассоваяСмена.ВерсияДанных КАК ВерсияДанных,
	|	ДокументКассоваяСмена.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументКассоваяСмена.Номер КАК Номер,
	|	ДокументКассоваяСмена.Дата КАК Дата,
	|	ДокументКассоваяСмена.Проведен КАК Проведен,
	|	ДокументКассоваяСмена.КассаККМ КАК КассаККМ,
	|	ДокументКассоваяСмена.НомерСменыККТ КАК НомерСменыККТ,
	|	ДокументКассоваяСмена.Организация КАК Организация,
	|	ДокументКассоваяСмена.Статус КАК Статус,
	|	ДокументКассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство,
	|	ДокументКассоваяСмена.ФискальноеУстройство.ТипОборудования КАК ТипОборудования,
	|	ДокументКассоваяСмена.ФискальноеУстройство.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	Документ.КассоваяСмена КАК ДокументКассоваяСмена
	|ГДЕ
	|	ДокументКассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|	И ДокументКассоваяСмена.Дата МЕЖДУ &ДатаН И &ДатаО
	|	И ДокументКассоваяСмена.КассаККМ = &КассаККМ
	|	И ДокументКассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство";
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос.Параметры.Вставить("ДатаН", НачалоДня(ДатаСмены) );
	Запрос.Параметры.Вставить("ДатаО", КонецДня(ДатаСмены));
	Запрос.Параметры.Вставить("КассаККМ", КассаККМ);
	Запрос.Параметры.Вставить("ФискальноеУстройство", КассаККМ.ФискальноеУстройство);
	Результат = РезультатЗапроса.Выбрать().Выбрать();
	
	ВозратЗнч	= Неопределено;
	Если Результат.Количество() > 0 Тогда
		ВозратЗнч	= Результат;
	КонецЕсли;
	
	Возврат ВозратЗнч;
	
КонецФункции

Функция ПолучитьНомераЧекаФискальногоУстройства(МассивДокументов) Экспорт
	
	мЧековККМ	= Новый Массив;
	Для Каждого ДокДанные Из МассивДокументов Цикл
		мЧековККМ.Добавить(ДокДанные.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФО.ДокументОснование КАК ДокументОснование,
		|	ФО.НомерЧекаККМ КАК НомерЧекаККМ,
		|	ФО.НомерСменыККМ КАК НомерСменыККМ,
		|	ФО.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
		|	ФО.ДанныеXML КАК ДанныеXML
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФО
		|ГДЕ
		|	ФО.ДокументОснование В (&мЧековККМ)";
	Запрос.УстановитьПараметр("мЧековККМ", мЧековККМ);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Результат	= Новый Соответствие;
	Для Каждого ЗаписьОПродаже  Из РезультатЗапроса Цикл
		ДанныеПоДокументу = Новый Структура("НомерЧекаККМ,НомерСменыККМ,РегистрационныйНомерККТ,ДанныеXML");
		ДанныеПоДокументу.НомерЧекаККМ = Формат(ДанныеПоДокументу.НомерЧекаККМ,"ЧГ=0");
		ДанныеПоДокументу.НомерСменыККМ = Формат(ДанныеПоДокументу.НомерСменыККМ,"ЧГ=0");
		ЗаполнитьЗначенияСвойств(ДанныеПоДокументу, ЗаписьОПродаже);
		//Получим РегистрационныйНомерККТ и подменим его тестовым. отладка.
		ДанныеПоДокументу.РегистрационныйНомерККТ 	= ПолучитьРегистрационныйНомерККТ( ЗаписьОПродаже.РегистрационныйНомерККТ );
		Результат.Вставить(ЗаписьОПродаже.ДокументОснование, ДанныеПоДокументу);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеКассовыхСменЧековККМ(МассивДокументов) Экспорт
	
	мЧековККМ	= Новый Массив;
	Для Каждого ДокДанные Из МассивДокументов Цикл
		мЧековККМ.Добавить(ДокДанные.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.Магазин КАК Магазин,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.КассаККМ.ПодключаемоеОборудование КАК КассаККМПодключаемоеОборудование,
	|	ЧекККМ.Дата КАК Дата
	|ПОМЕСТИТЬ ДокументыЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка В(&мДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассоваяСмена.Ссылка КАК КассоваяСмена,
	|	ДокументыЧекиККМ.Ссылка КАК ЧекККМ
	|ИЗ
	|	ДокументыЧекиККМ КАК ДокументыЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО ДокументыЧекиККМ.Магазин = КассоваяСмена.Магазин
	|			И ДокументыЧекиККМ.КассаККМ = КассоваяСмена.КассаККМ
	|			И ДокументыЧекиККМ.КассаККМПодключаемоеОборудование = КассоваяСмена.ФискальноеУстройство
	|			И (КассоваяСмена.НачалоКассовойСмены >= ДОБАВИТЬКДАТЕ(ДокументыЧекиККМ.Дата, ДЕНЬ, -1))
	|			И (КассоваяСмена.НачалоКассовойСмены < ДокументыЧекиККМ.Дата)
	|ГДЕ
	|	КассоваяСмена.Проведен";
	
	Запрос.УстановитьПараметр("мДокументов",	мЧековККМ);
	РезультатЗапроса = Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать();
	Результат	= Новый Соответствие;
	Пока ВДЗ.Следующий() Цикл
		ДанныеКассовойСмены = Новый Структура();
		ДанныеКассовойСмены.Вставить("КассоваяСмена",		ВДЗ.КассоваяСмена);
		ДанныеКассовойСмены.Вставить("КассоваяСменаНомер",	ВДЗ.КассоваяСмена.НомерСменыККТ);
		ДанныеКассовойСмены.Вставить("ДатаОткрытия",		ВДЗ.КассоваяСмена.НачалоКассовойСмены);
		ДанныеКассовойСмены.Вставить("ДатаЗакрытия", 		ВДЗ.КассоваяСмена.ОкончаниеКассовойСмены);
		Результат.Вставить(ВДЗ.ЧекККМ, ДанныеКассовойСмены);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьДаннеДокументаСменыИРегНомер( Документы ) Экспорт
	
	Если ТипЗнч(Документы) = Тип("Массив") Тогда
		мДокументов	= Документы;
	Иначе
		мДокументов	= Новый Массив;
		мДокументов.Добавить(Документы);
	КонецЕсли;
	
	ФискальныеДанныеДокументов	 = ПолучитьНомераЧекаФискальногоУстройства(мДокументов);
	ДанныеКассовыхСмен			 = ПолучитьДанныеКассовыхСменЧековККМ(мДокументов);
	
	СводнаяРезультатов	= Новый Соответствие;
	Для Каждого ДокСсылка Из мДокументов Цикл
		
		ФискальныеДанные	= ФискальныеДанныеДокументов[ДокСсылка.Ссылка];
		ДанныеКассовойСмены	= ДанныеКассовыхСмен[ДокСсылка.Ссылка];
		
		Результат	= Новый Структура(
		"РегистрационныйНомерККТ, КассоваяСмена, КассоваяСменаНомер, ДатаОткрытия, ДатаЗакрытия, СуммаНал, СуммаБезНал, НомерЧекаККМ, Организация, ДанныеXML", 
		9999999999999999, 
		ПредопределенноеЗначение("Документ.КассоваяСмена.ПустаяСсылка"),
		"",
		ТекущаяДата(),
		ТекущаяДата(),
		0,
		0,
		ФискальныеДанные.НомерЧекаККМ,
		ДокСсылка.Ссылка.Организация,
		);
		Если ТипЗнч(ФискальныеДанные.ДанныеXML) = Тип("Строка") Тогда
			Результат.ДанныеXML					= ФискальныеДанные.ДанныеXML; 
		ИначеЕсли ТипЗнч(ФискальныеДанные.ДанныеXML) = Тип("ХранилищеЗначения") Тогда
			Результат.ДанныеXML					= ФискальныеДанные.ДанныеXML.Получить(); 
		КонецЕсли;
		Результат.РегистрационныйНомерККТ 	= ФискальныеДанные.РегистрационныйНомерККТ;
		СводнаяРезультатов.Вставить(ДокСсылка.Ссылка, Результат);
		ЗаполнитьЗначенияСвойств(Результат, ДанныеКассовойСмены);
		
		Результат.СуммаНал		= ДокСсылка.Ссылка.СуммаДокумента;
		Для Каждого ОпатаБНал Из ДокСсылка.Ссылка.Оплата Цикл
			Если ОпатаБНал.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
				Результат.СуммаБезНал = Результат.СуммаБезНал + ОпатаБНал.Сумма;
			КонецЕсли;
		КонецЦикла;
		Результат.СуммаНал		= Результат.СуммаНал		- Результат.СуммаБезНал;
		Результат.СуммаБезНал	= Формат(Результат.СуммаБезНал, "ЧРД=.; ЧН=0; ЧГ=0");
		Результат.СуммаНал		= Формат(Результат.СуммаНал,	"ЧРД=.; ЧН=0; ЧГ=0");
		
		СводнаяРезультатов.Вставить(ДокСсылка.Ссылка, Результат);
	КонецЦикла;
	
	Возврат СводнаяРезультатов;
	
КонецФункции

Функция ПолучитьОсновныеРевизиытДокументов( Знач Документы ) Экспорт
	
	Если ТипЗнч(Документы) = Тип("Массив") Тогда
		МДокументов	= Документы;
	Иначе
		МДокументов	= Новый Массив;
		МДокументов.Добавить(Документы);
	КонецЕсли;
	
	РезультатОбработки = Новый Соответствие;
	Для Каждого Документ Из МДокументов Цикл
		РезультатОбработки.Вставить(Документ.Ссылка, Новый Соответствие );
		РезультатОбработки[Документ.Ссылка].Вставить("Дата", Документ.Ссылка.Дата);
		РезультатОбработки[Документ.Ссылка].Вставить("Организация", Документ.Ссылка.Организация);
		РезультатОбработки[Документ.Ссылка].Вставить("Магазин", Документ.Ссылка.Магазин);
		Попытка
			РезультатОбработки[Документ.Ссылка].Вставить("Склад", Документ.Ссылка.Товары[0].Склад);
		Исключение
			РезультатОбработки[Документ.Ссылка].Вставить("Склад", ПараметрыСеанса.ТекущийПользователь.Магазин.СкладПродажи);
		КонецПопытки;
	КонецЦикла;
	
	Возврат РезультатОбработки;
КонецФункции

Функция ПолучитьДокументыКОтправке( Количество = 1, ДокСсылка = Неопределено ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Saby_ОчередьЧеков.ЧекККМ КАК ЧекККМ,
	|	Saby_ОчередьЧеков.Передан КАК Передан,
	|	ВЫБОР
	|		КОГДА Saby_ОчередьЧеков.ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА Saby_ОчередьЧеков.ЧекККМ.ЧекККМПродажа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокОснование
	|ИЗ
	|	РегистрСведений.Saby_ОчередьЧеков КАК Saby_ОчередьЧеков
	|ГДЕ
	|	ИСТИНА
	|	И НЕ Saby_ОчередьЧеков.Передан
	|	И ВЫБОР
	|			КОГДА &ДокСсылка <> НЕОПРЕДЕЛЕНО
	|				ТОГДА Saby_ОчередьЧеков.ЧекККМ = &ДокСсылка
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка );
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(Количество, "ЧН=0; ЧГ=0") );
	РезультатЗапроса = Запрос.Выполнить();
	
	//Попытка
	ВДЗ = РезультатЗапроса.Выбрать();
	//Исключение
	//	ио = ИнформацияОбОшибке();
	//КонецПопытки;
	мДокументов	= Новый Массив;
	Пока ВДЗ.Следующий() Цикл
		мДокументов.Добавить(Новый Структура("Ссылка, ДокОснование", ВДЗ.ЧекККМ, ВДЗ.ДокОснование) );
	КонецЦикла;
	Возврат мДокументов;
	
КонецФункции

Функция ПолучитьРегистрационныйНомерККТ( РегистрационныйНомерККТ ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ДанныеТестовогоФР = ХранилищеОбщихНастроек.Загрузить("Saby", "DataKKT",,"Saby");
	Если ТипЗнч(ДанныеТестовогоФР) = Тип("Структура") Тогда
		ТестовыйНомерККТ = Saby_Core.get_prop(ДанныеТестовогоФР, "РегистрационныйНомерККТ", РегистрационныйНомерККТ);
		Если ТипЗнч(ТестовыйНомерККТ) = Тип("Число") ТОгда
			ТестовыйНомерККТ = Формат(ТестовыйНомерККТ, "ЧГ=0");	
		КонецЕсли;
	Иначе
		ТестовыйНомерККТ = РегистрационныйНомерККТ;
	КонецЕсли;
	Возврат ТестовыйНомерККТ;
КонецФункции

#КонецОбласти

#Область Интерфейс

Процедура СоздатьКнопкуОткрытияФормыПоискаКарты(ЭтаФорма) Экспорт
	Элементы	= ЭтаФорма.Элементы;
	//Декорация картинка
	НовыйЭлемент = Элементы.Вставить("Saby_ПоискКартыЛояльности", Тип("ПолеФормы"), Элементы.ГруппаЧастотныхОпераций, Элементы.КартинкаЧО08ОплатаБонусами); 
	НовыйЭлемент.Вид			= ВидПоляФормы.ПолеКартинки;
	НовыйЭлемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Гиперссылка  	= Истина;
	НовыйЭлемент.ПутьКДанным	= "КартинкаШаблон";
	НовыйЭлемент.Ширина			= 20;
	НовыйЭлемент.Высота			= 3;
	НовыйЭлемент.РастягиватьПоВертикали	= Ложь;
	НовыйЭлемент.ВысотаЗаголовка= 3;
	НовыйЭлемент.Заголовок 		= "СБИС лояльность";
	НовыйЭлемент.ТекстНевыбраннойКартинки = "СБИС лояльность";
	НовыйЭлемент.Шрифт			= Новый Шрифт(,,Истина);
	НовыйЭлемент.УстановитьДействие("Нажатие", "Saby_ОткрытьФормуПоискКартыЛояльности");
КонецПроцедуры

#КонецОбласти

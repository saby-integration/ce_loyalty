
Функция ПолучитьОповещениеДляОшибки(ОшибкаСтруктура, context_params)
	АдресОшибки			= "";
	ДеталиОшибки		= Saby_Core.get_prop(ОшибкаСтруктура, "detail");
	ЕррорОшибки			= Saby_Core.get_prop(ДеталиОшибки, "error");
	СтрокиТекстаОшибки	= СокрЛП(Saby_Core.get_prop(ЕррорОшибки, "details", ""));
	ИдОшибки			= Прав(СтрПолучитьСтроку(СтрокиТекстаОшибки, 1), 36);             
	Попытка
		//Проверка Ид на уникальный идентификатор
		УИ = Новый УникальныйИдентификатор(ИдОшибки);
		ДопПараметры = Новый Структура("ИдОшибки, context_params", ИдОшибки, context_params);
	    ОповешениеНажатиеПоОшибке = Новый ОписаниеОповещения("ОткрытьОкноОшибкиВБраузере", Saby_Сервисы_Клиент, ДопПараметры);
	Исключение
		ВызватьИсключение ("Идентификатор ошибки не является GUID");
	КонецПопытки;
	
	Возврат ОповешениеНажатиеПоОшибке;
КонецФункции

Функция ПодготовитьДанныеИПересчитатьСкидки(ЭтаФорма, ТоварыЧека, ЗакрытьФорму=Ложь, Saby_Данные = Неопределено) Экспорт
	Saby_Данные		= ЭтаФорма.Saby_Данные;
	context_params	= ЭтаФорма.context_params;
	Отказ			= Ложь;
	ИдОперации		= СокрЛП(Новый УникальныйИдентификатор);
	ДанныеОбсчёта	= Новый Структура("context_params, Saby_Данные, ИдОперации");
	ЗаполнитьЗначенияСвойств(ДанныеОбсчёта, ЭтаФорма);
	ДанныеОбсчёта.Вставить("ЭтоВозврат", Saby_Данные.ДокументЭтоВозврат);
	ДанныеОбсчёта.Вставить("ИдОперации", ИдОперации);
	ДанныеОбсчёта.Вставить("ДокументОснованиеСсылка", get_prop(Saby_Данные, "ДокументОснованиеСсылка"));
	
	ДопПараметры = Новый Структура("api_url, operation_uuid", Saby_Core.get_prop(context_params, "api_url", ""), ИдОперации);
	СообщениеПользователю = "Ошибка при расчёте скидок.";
	Попытка
		РезультатРасчёта = Saby_Сервисы_Клиент.РассчитатьСкидки( ДанныеОбсчёта, ТоварыЧека, Saby_Данные.ДокументБалловСписать, Отказ);
		Если НЕ ЗначениеЗаполнено(РезультатРасчёта) Тогда
			Отказ = Истина;
			ПоказатьОповещениеПользователя(
			СообщениеПользователю,
			,
			"Открыть страницу с данными об ошибке.",
			БиблиотекаКартинок.Ошибка32,
			СтатусОповещенияПользователя.Важное,);
			
			ЗакрытьФорму	=	Истина;
			Возврат Отказ;
		Иначе
			Saby_Данные.Вставить("ИзменилсяСостав", Ложь);
		КонецЕсли;
	Исключение
		ИнфоОбОшибке		=	ИнформацияОбОшибке();
		ОшибкаСтруктура		=	Saby_Core.NewExtExceptionСтруктура(ИнфоОбОшибке);
		Saby_Core.ExtExceptionToJournal(ОшибкаСтруктура);
		ОбработаннаяОшибка	=	Новый структура("data, status", ОшибкаСтруктура, "error");
		ОповещениеПриНажатии = Неопределено;
		Попытка
			ОповещениеПриНажатии = ПолучитьОповещениеДляОшибки(ОшибкаСтруктура, context_params);
			ПодробностиСообщения = "Подробнее об ошибке...";
		Исключение
			ИнфоОбОшибкеВнутрВрем	=	ИнформацияОбОшибке();
			ОшибкаСтруктураВрем		=	Saby_Core.NewExtExceptionСтруктура(ИнфоОбОшибкеВнутрВрем);
			Saby_Core.ExtExceptionToJournal(ОшибкаСтруктураВрем);
		КонецПопытки;
		Saby_Core.ExtExceptionToJournal(ОшибкаСтруктура);
		ЗакрытьФорму		=	Истина;
		
		Если ОшибкаСтруктура.type = "BrokenTax" Тогда
			СообщениеПользователю = "Ошибка расчёта скидок.";
			ПодробностиСообщения = ОшибкаСтруктура.message;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			СообщениеПользователю,
			ОповещениеПриНажатии,
			ПодробностиСообщения,
			БиблиотекаКартинок.Ошибка32,
			СтатусОповещенияПользователя.Важное,
		);
		
		Возврат Отказ;
	КонецПопытки;
	Возврат Не Отказ;
КонецФункции

Функция Saby_ИнициализироватьМассивСкидок( МассивСкидок ) Экспорт
	НовыйМассивСкидок	= Новый Массив;
	
	ТоварСчет = 0;
	Для Каждого СтрокаТовара Из МассивСкидок Цикл
		Если ТипЗнч(СтрокаТовара["Номенклатура"]) = Тип("СправочникСсылка.Номенклатура") Тогда
			//Копия таблицы просто перезаполняем
			НовыйМассивСкидок = МассивСкидок;
			Прервать;
		Иначе
			СтрокаТов = 	Новый Структура("Номенклатура, КоличествоУпаковок, Цена, Сумма, СуммаСкидки, ЦенаВручную", 
				Saby_Сервисы_Сервер.ПолучитьНоменклатуруПоUID( get_prop(СтрокаТовара["Номенклатура"], "ИдИС", "00000000-0000-0000-0000-000000000000") ),
				Число(СтрЗаменить( get_prop(СтрокаТовара, "Количество",	"0"), ".", ",")),
				Число(СтрЗаменить( get_prop(СтрокаТовара, "Цена",		"0"), ".", ",")),
				Число(СтрЗаменить( get_prop(СтрокаТовара, "Сумма",		"0"), ".", ",")),
				Число(СтрЗаменить( get_prop(СтрокаТовара, "Скидка",		"0"), ".", ",")),
				Число(СтрЗаменить( get_prop(СтрокаТовара, "ЦенаВручную","0"), ".", ",")),
			);
			НовыйМассивСкидок.Добавить( СтрокаТов );
		КонецЕсли;
		ТоварСчет = ТоварСчет + 1;
	КонецЦикла;
	
	Возврат НовыйМассивСкидок;
КонецФункции

Функция РассчитатьСкидки( ДанныеОбсчёта, ТоварыЧека, КоличествоСписываемыхБаллов = Неопределено, Отказ) Экспорт
	РезультатОбсчёта = Ложь;
	Если Отказ Тогда
		Возврат РезультатОбсчёта;
	КонецЕсли;
	
	context_params = ДанныеОбсчёта.context_params;
	
	//Данные объекта продаж ЧекККМ
	мПараметров = Новый Массив();
	_Покупатель_= Saby_Сервисы_Клиент.ПолучитьСтруктуруПоискаПокупателя( ДанныеОбсчёта.Saby_Данные.КЛНомер, Отказ );
	Если ПустаяСтрока(_Покупатель_.НомерКартыТелефона) Тогда
		_Покупатель_.Вставить("НомерКартыТелефона", ДанныеОбсчёта.Saby_Данные.КЛДанныеПоиска);
	КонецЕсли;
	
	мТоварыЧека	= Новый Массив;
	Для Каждого ТоварСтрока Из ТоварыЧека Цикл
		СтрТовараСтрукт = Новый Структура("Номенклатура, КоличествоУпаковок, Цена, Сумма, СтавкаНДС, СуммаНДС, ЦенаВручную");
		ЗаполнитьЗначенияСвойств( СтрТовараСтрукт, ТоварСтрока);
		мТоварыЧека.Добавить( СтрТовараСтрукт );
	КонецЦикла;
	
	//Количество баллов при СписатьВсеБаллы - истина, должно передаваться максимум из доступных по карте
	ДанныеОбсчёта.Saby_Данные.ДокументБалловСписать = ?( ДанныеОбсчёта.Saby_Данные.СписатьВсеБаллы, ДанныеОбсчёта.Saby_Данные.КЛБалловВсего, КоличествоСписываемыхБаллов );
	
	Парам	= Новый Структура("ДокУИд, ConnectionId, Организация, Магазин, Склад, ЦенаВключаетНДС, Покупатель, СписатьБаллов, Товары",
	ДанныеОбсчёта.Saby_Данные.ЧекИд,
	context_params.ConnectionId,
	ДанныеОбсчёта.Saby_Данные.Организация,
	ДанныеОбсчёта.Saby_Данные.Магазин,
	ДанныеОбсчёта.Saby_Данные.Склад, 
	ДанныеОбсчёта.Saby_Данные.ЦенаВключаетНДС,
	_Покупатель_,
	ДанныеОбсчёта.Saby_Данные.ДокументБалловСписать,
	мТоварыЧека,
	);
	Если ДанныеОбсчёта.Saby_Данные.ДокументЭтоВозврат Тогда Парам.Вставить("Возврат", Истина);	КонецЕсли;
	
 	Если ПустаяСтрока(_Покупатель_.QRКод) и ПустаяСтрока(_Покупатель_.НомерКартыТелефона)  Тогда
		Парам.Удалить("Покупатель");
	КонецЕсли;
	
	Парам.Вставить("ДокументОснованиеСсылка", get_prop(ДанныеОбсчёта, "ДокументОснованиеСсылка"));	
	
	мПараметров.Добавить( Парам );
	ИдОперации	= Неопределено;
	ДанныеОбсчёта.Свойство("ИдОперации", ИдОперации);
	ПараметрыОбъектов	= Saby_Сервисы_Сервер.ПолучитьСтруктуруОбъектовДляРасчётаСкидки( мПараметров, ИдОперации );
	
	//При выбранной карте отправим на обсчет скидок ЧекККМ
	мРасчитанныхДанных	= Saby_Сервисы_Клиент.РассчитатьДокументы( context_params, ПараметрыОбъектов, 1, Отказ );
	Saby_БалловСписать	= ДанныеОбсчёта.Saby_Данные.ДокументБалловСписать;
	Если НЕ Отказ И ТипЗнч(мРасчитанныхДанных) = Тип("Массив") Тогда
		Для Каждого ДокОбсчёт Из мРасчитанныхДанных Цикл
			Saby_СуммаДокументаСоСкидкой= Число(СтрЗаменить( get_prop(ДокОбсчёт,"Сумма",			"0"), ".", ","));
			Saby_Скидка					= Число(СтрЗаменить( get_prop(ДокОбсчёт,"Скидка", 			"0"), ".", ","));
			Saby_БалловДоступно			= Число(СтрЗаменить( get_prop(ДокОбсчёт,"ДоступныеБонусы",	"0"), ".", ","));
			Saby_СуммаДокумента			= Saby_СуммаДокументаСоСкидкой + Saby_Скидка; 
			
			//***************************ИТОГО***********************
			ДанныеОбсчёта.Saby_Данные.Вставить("ЧекСсылкаУРЛ", ДокОбсчёт["СсылкаНаЧек"]);
			ДанныеОбсчёта.Saby_Данные.Вставить("ЧекБалловНачислено", 
				Число(СтрЗаменить( get_prop(ДокОбсчёт,"НачисленныеБонусы",	"0"), ".", ",")) );
			ДанныеОбсчёта.Saby_Данные.Вставить("ДокументВтчБаллами", 
				Число(СтрЗаменить( get_prop(ДокОбсчёт,"СписанныеБонусы",	"0"), ".", ",")) );
			
			ДанныеОбсчёта.Saby_Данные.Вставить("ДокументСуммаСоСкидкой",Saby_СуммаДокументаСоСкидкой);
			ДанныеОбсчёта.Saby_Данные.Вставить("ДокументСкидка",		Saby_Скидка);
			ДанныеОбсчёта.Saby_Данные.Вставить("ДокументБалловДоступно",Saby_БалловДоступно);
			ДанныеОбсчёта.Saby_Данные.Вставить("ДокументСумма",			Saby_СуммаДокумента);
			Если ДанныеОбсчёта.Saby_Данные.ДокументЭтоВозврат Тогда 
				//При возврате пересчитывать ни чего не нужно, поэтому и результата по товарам не будет
				ДанныеОбсчёта.Saby_Данные.Вставить("ДокументСкидки",		Новый Массив);
			Иначе
				ДанныеОбсчёта.Saby_Данные.Вставить("ДокументСкидки",		Saby_ИнициализироватьМассивСкидок(ДокОбсчёт["ТаблДок"]));
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Иначе
		Если мРасчитанныхДанных.Свойство("status") Тогда
			//TODO пробросить инф об ошибке.
		КонецЕсли;
	КонецЕсли;
	РезультатОбсчёта = Истина;
	
	Возврат РезультатОбсчёта;
КонецФункции

